class Solution {
    public int findPeakElement(int[] nums) {
        int start = 0, end = nums.length - 1;

        while(start < end){
            int mid = start + (end - start) / 2;

            if(nums[mid] > nums[mid+1]){
                end = mid;
            }

            else start = mid + 1;
        }
        return start;
    }
}

Time Complexity: O(log n)
The algorithm uses binary search and repeatedly halves the search space, making it logarithmic in time.

Space Complexity: O(1)
It uses only a few variables (start, end, mid), so space usage is constant.