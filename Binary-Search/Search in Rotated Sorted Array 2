class Solution {
    public boolean search(int[] arr, int target) {
        int start = 0, end = arr.length - 1;
        while(start <= end){
            int mid = start + (end-start) / 2;
            if(arr[mid] == target) return true;
            
            if(arr[start] == arr[mid] && arr[mid] == arr[end]){
                start++;
                end--;
                continue;
            }
            
            if(arr[start] <= arr[mid]){
                if(arr[start] <= target && target <= arr[mid]){
                    end = mid - 1;
                }
                else{
                    start = mid + 1;
                }
            }
            if(arr[mid] <= arr[end]){
                if(arr[mid] <= target && target <= arr[end]){
                    start = mid + 1;
                }
                else{
                    end = mid - 1;
                }
            }
        }
        return false;
    }
}

Time Complexity: O(log n) on average, O(n) in the worst case
In the best/average case, it behaves like binary search: cutting the search space in half, leading to O(log n).
However, in the worst case (e.g., with many duplicates like [2,5,6,0,0,1,2]), where arr[start] == arr[mid] == arr[end], the algorithm may degrade to linear time O(n) because it must shrink the window by one from both sides.

Space Complexity: O(1)
Only a constant amount of extra space is used (for variables like start, end, mid), regardless of input size.