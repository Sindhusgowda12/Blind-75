class Solution {
    public int search(int[] arr, int target) {
        int start = 0, end = arr.length - 1;
        while(start <= end){
            int mid = start + (end-start) / 2;
            if(arr[mid] == target) return mid;

            if(arr[start] <= arr[mid]){
                if(arr[start] <= target && target <= arr[mid]){
                    end = mid - 1;
                }
                else{
                    start = mid + 1;
                }
            }
            if(arr[mid] <= arr[end]){
                if(arr[mid] <= target && target <= arr[end]){
                    start = mid + 1;
                }
                else{
                    end = mid - 1;
                }
            }
        }
        return -1;
    }
}

Time Complexity (O(log n)): 
The algorithm performs a modified binary search on the rotated sorted array, halving the search space in each iteration.

Space Complexity (O(1)): 
The solution uses a constant amount of extra space for pointers and variables, hence space complexity is O(1).