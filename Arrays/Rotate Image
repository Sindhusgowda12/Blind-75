class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        
        for(int i = 0; i < n; i++)
        {
            for(int j = i; j < n; j++)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n/2; j++)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][n-1-j];
                matrix[i][n-1-j] = temp;
            }
        }
    }
}

Time Complexity (O(n^2)): 
The algorithm first performs a transpose of the matrix in O(n^2) time (since each element in the upper triangle is swapped once), and then it performs a horizontal flip in O(n^2) time as well. Therefore, the overall time complexity is O(n^2).

Space Complexity (O(1)): 
The solution modifies the matrix in place without using any additional data structures, so the space complexity is constant, O(1).