public class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int left = m-1;
        int right = n-1;
        int index = m+n-1;
        while(left >= 0 && right >= 0){
            if(nums1[left] > nums2[right]){
                 nums1[index] = nums1[left];
                 left--;
                 index--;
            }
            else{
                 nums1[index] = nums2[right];
                 right--;
                 index--;
            }
        }
        while(right >= 0){
            nums1[index] = nums2[right];
            index--;
            right--;
        }
    }
}

Time Complexity (O(m + n)): 
The algorithm iterates through both nums1 and nums2 arrays, with the total number of iterations being the sum of the lengths of both arrays, resulting in a time complexity of O(m + n).

Space Complexity (O(1)): 
The solution modifies the nums1 array in-place without using any extra space (except for a few variables), hence the space complexity is constant, O(1).