class MinStack {
    Stack<Integer> st;
    Stack<Integer> minSt;
    public MinStack() {
        st = new Stack<>();
        minSt = new Stack<>();
    }
    
    public void push(int val) {
        st.push(val);
        if(minSt.isEmpty() || val <= minSt.peek()){
            minSt.push(val);
        }
    }
    
    public void pop() {
        if(st.pop().equals(minSt.peek())){
            minSt.pop();
        }
    }
    
    public int top() {
        return st.peek();
    }
    
    public int getMin() {
        return minSt.peek();
    }
}

Time Complexity:
O(1) for push(), pop(), top(), and getMin() — All operations are constant time because we are only accessing or modifying the top of the stacks.

Space Complexity:
O(n) — The space is proportional to the number of elements in the stack, since minSt stores a value for each element pushed that is a minimum.