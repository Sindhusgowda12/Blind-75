class MyStack {
    Queue<Integer> q;
    public MyStack() {
        q = new LinkedList<>();
    }
    
    public void push(int x) {
        q.add(x);
        for(int i = 0; i < q.size() - 1; i++){
            q.add(q.poll());
        }
    }
    
    public int pop() {
        return q.poll();
    }
    
    public int top() {
        return q.peek();
    }
    
    public boolean empty() {
        return q.isEmpty();
    }
}

Time Complexity (per operation)
push(x): O(n) — Rotates the queue to keep the new element at the front.

pop(): O(1) — Just remove from front.

top(): O(1) — Peek at the front.

empty(): O(1) — Check if queue is empty.

Space Complexity
O(n) — Only one queue is used to store all n elements.